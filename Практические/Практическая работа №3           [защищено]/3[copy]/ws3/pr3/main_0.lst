

HI-TECH Software 8051 Macro Assembler V9.60                                Page 1
                                                       Tue Mar 18 21:55:43 2025

     1                           	psect	idata,class=DATA,space=1,limit=080h
     2                           	psect	irdata,class=DATA,limit=080h
     3                           	global	_main
     4                           	signat	_main,88
     5                           	global	stack_internal
     6                           	psect	text,class=CODE
     7                           	psect	text
     8                           	file	"D:\MS11ws\3\ws3\pr3\main.c"
     9                           	line	36
    10  00110                     _main:
    11  00110  80 11              	j	f1481
    12  00112                     f1480:
    13                           ;main.c: 36: void main(void) {
    14                           
    15                           ;main.c: 55: dispInit();
    16                           
    17                           	global	_dispInit
    18                           	signat	_dispInit,88
    19                           	FNCALL	_main,_dispInit
    20                           	line	55
    21  00112  12 0125            	lcall	_dispInit
    22                           ;main.c: 60: dispAnimate ("ÈÃÍÀÒÎÂÈ× ÂÀÄÈÌ", 5);
    23                           
    24                           	global	_dispAnimate
    25                           	signat	_dispAnimate,8312
    26                           	FNCALL	_main,_dispAnimate
    27                           	line	60
    28  00115  7A 00              	mov	r2,#high (5)
    29  00117  7B 05              	mov	r3,#low (5)
    30  00119  7C 01              	mov	r4,#high (0+u19)
    31  0011B  7D 00              	mov	r5,#low (0+u19)
    32  0011D  12 01C3            	lcall	_dispAnimate
    33                           
    34                           ;main.c: 62: while(1);
    35                           
    36                           	line	62
    37  00120                     l5:
    38  00120                     l4:
    39  00120  80 FE              	jmp	l5
    40  00122                     l6:
    41                           ;main.c: 63: }
    42                           
    43                           	line	63
    44  00122                     l3:
    45  00122  22                 	ret
    46  00123                     f1481:
    47  00123  80 ED              	j	f1480
    48  0000                     f1482	equ	0
    49                           	line	65
    50  00125                     _dispInit:
    51  00125  80 2D              	j	f1511
    52  00127                     f1510:
    53                           ;main.c: 65: void dispInit() {
    54                           
    55                           ;main.c: 67: dispComm.Clear = 0x01;
    56                           
    57                           	global	_dispComm
    58                           	line	67
    59  00127  75 22  01          	mov	_dispComm,#1
    60                           ;main.c: 68: dispComm.MoveStart = 0x02;
    61                           
    62                           	line	68
    63  0012A  75 25  02          	mov	0+_dispComm+03h,#2
    64                           ;main.c: 69: dispComm.Off = 0x08;
    65                           
    66                           	line	69
    67  0012D  75 23  08          	mov	0+_dispComm+01h,#8
    68                           ;main.c: 70: dispComm.On = 0x0E;
    69                           
    70                           	line	70
    71  00130  75 24  0E          	mov	0+_dispComm+02h,#14
    72                           ;main.c: 71: dispComm.SetLeft = 0x04;
    73                           
    74                           	line	71
    75  00133  75 26  04          	mov	0+_dispComm+04h,#4
    76                           ;main.c: 72: dispComm.SetRight = 0x06;
    77                           
    78                           	line	72
    79  00136  75 27  06          	mov	0+_dispComm+05h,#6
    80                           ;main.c: 73: dispComm.MoveStartOf1 = 0x80;
    81                           
    82                           	line	73
    83  00139  75 28  80          	mov	0+_dispComm+06h,#128
    84                           ;main.c: 74: dispComm.MoveStartOf2 = 0xC0;
    85                           
    86                           	line	74
    87  0013C  75 29  C0          	mov	0+_dispComm+07h,#192
    88                           ;main.c: 75: dispComm.MovePos1Of2 = 0xC1;
    89                           
    90                           	line	75
    91  0013F  75 2A  C1          	mov	0+_dispComm+08h,#193
    92                           ;main.c: 76: dispComm.MovePos3Of1 = 0x83;
    93                           
    94                           	line	76
    95  00142  75 2B  83          	mov	0+_dispComm+09h,#131
    96                           ;main.c: 77: dispComm.Mode8bit = 0x38;
    97                           
    98                           	line	77
    99  00145  75 2C  38          	mov	0+_dispComm+0Ah,#56
   100                           ;main.c: 79: dispRW = 0;
   101                           
   102                           	line	79
   103  00148  C2 87              	clr	p0.7
   104                           ;main.c: 80: dispRS = 1;
   105                           
   106                           	line	80
   107  0014A  D2 86              	setb	p0.6
   108                           ;main.c: 81: dispE = 1;
   109                           
   110                           	line	81
   111  0014C  D2 85              	setb	p0.5
   112                           ;main.c: 82: dispExecute (dispComm.Clear);
   113                           
   114                           	global	_dispExecute
   115                           	signat	_dispExecute,4216
   116                           	FNCALL	_dispInit,_dispExecute
   117                           	line	82
   118  0014E  AD 22              	mov	r5,_dispComm
   119  00150  12 0156            	lcall	_dispExecute
   120                           
   121                           ;main.c: 83: }
   122                           
   123                           	line	83
   124  00153                     l7:
   125  00153  22                 	ret
   126  00154                     f1511:
   127  00154  80 D1              	j	f1510
   128  0000                     f1512	equ	0
   129                           ;	param _command assigned to r5 on entry
   130                           	line	84
   131  00156                     _dispExecute:
   132  00156  80 0B              	j	f1531
   133  00158                     f1530:
   134                           ;main.c: 84: void dispExecute (unsigned char com
                                 mand) {
   135                           
   136                           ;main.c: 85: dispRS = 0;
   137                           
   138                           	line	85
   139  00158  C2 86              	clr	p0.6
   140                           ;main.c: 86: dispRW = 0;
   141                           
   142                           	line	86
   143  0015A  C2 87              	clr	p0.7
   144                           ;main.c: 87: dispData = command;
   145                           
   146                           	line	87
   147  0015C  8D A0              	mov	0A0h,r5
   148                           ;main.c: 88: dispE = 1;
   149                           
   150                           	line	88
   151  0015E  D2 85              	setb	p0.5
   152                           ;main.c: 89: dispE = 0;
   153                           
   154                           	line	89
   155  00160  C2 85              	clr	p0.5
   156                           ;main.c: 90: }
   157                           
   158                           	line	90
   159  00162                     l8:
   160  00162  22                 	ret
   161  00163                     f1531:
   162  00163  80 F3              	j	f1530
   163  0000                     f1532	equ	0
   164                           ;	param _inp assigned to r5 on entry
   165                           	global	_dispWriteRu
   166                           	signat	_dispWriteRu,4216
   167                           	line	91
   168  00165                     _dispWriteRu:
   169  00165  80 5A              	j	f1541
   170  00167                     f1540:
   171                           ;main.c: 91: void dispWriteRu (unsigned char inp
                                 ) {
   172                           
   173                           ;	var   _j assigned to ?a_dispWriteRu+0
   174                           ;main.c: 92: int j = inp;
   175                           
   176                           	line	92
   177  00167  75 70  00          	mov	?a_dispWriteRu+0,#0
   178  0016A  8D 71              	mov	?a_dispWriteRu+0+1,r5
   179                           ;main.c: 93: dispRW = 0;
   180                           
   181                           	line	93
   182  0016C  C2 87              	clr	p0.7
   183                           ;main.c: 94: dispRS = 1;
   184                           
   185                           	line	94
   186  0016E  D2 86              	setb	p0.6
   187                           ;main.c: 95: if (inp >= 0xC0 && inp <= 0xF1) {
   188                           
   189                           ;	var   _inp assigned to ?a_dispWriteRu+2
   190                           ;_inp stored from r5
   191                           	line	95
   192  00170  8D 72              	mov	?a_dispWriteRu+2,r5
   193  00172  E5 72              	mov	a,?a_dispWriteRu+2
   194  00174  24 40              	add	a,#--64
   195  00176  50 0C              	bnc	u11
   196  00178  80 00              	jmp	u10
   197  0017A                     u10:
   198  0017A  E5 72              	mov	a,?a_dispWriteRu+2
   199  0017C  24 0E              	add	a,#--14
   200  0017E  40 04              	bc	u21
   201  00180  80 00              	jmp	u20
   202  00182                     u20:
   203  00182  80 04              	jmp	u30
   204  00184                     u11:
   205  00184                     u21:
   206  00184  80 00              	jmp	u31
   207  00186                     u31:
   208  00186  80 26              	jmp	l10
   209  00188                     u30:
   210                           ;main.c: 96: j = inp - 0x20;
   211                           
   212                           	line	96
   213  00188  A9 72              	mov	r1,?a_dispWriteRu+2
   214  0018A  78 00              	mov	r0,#0
   215  0018C  E9                 	mov	a,r1
   216  0018D  24 E0              	add	a,#0E0h
   217  0018F  F5 71              	mov	?a_dispWriteRu+0+1,a
   218  00191  E8                 	mov	a,r0
   219  00192  34 FF              	addc	a,#0FFh
   220  00194  F5 70              	mov	?a_dispWriteRu+0,a
   221                           ;main.c: 97: if (inp > 0xC5)
   222                           
   223                           	line	97
   224  00196  E5 72              	mov	a,?a_dispWriteRu+2
   225  00198  24 3A              	add	a,#--58
   226  0019A  50 02              	bnc	u41
   227  0019C  80 02              	jmp	u40
   228  0019E                     u41:
   229  0019E  80 0E              	jmp	l11
   230  001A0                     u40:
   231                           ;main.c: 98: j = inp - 0x1F;
   232                           
   233                           	line	98
   234  001A0  A9 72              	mov	r1,?a_dispWriteRu+2
   235  001A2  78 00              	mov	r0,#0
   236  001A4  E9                 	mov	a,r1
   237  001A5  24 E1              	add	a,#0E1h
   238  001A7  F5 71              	mov	?a_dispWriteRu+0+1,a
   239  001A9  E8                 	mov	a,r0
   240  001AA  34 FF              	addc	a,#0FFh
   241  001AC  F5 70              	mov	?a_dispWriteRu+0,a
   242  001AE                     l11:
   243                           	line	99
   244  001AE                     l10:
   245                           ;main.c: 99: }
   246                           
   247                           ;main.c: 100: if (inp == 0xA8)
   248                           
   249                           	line	100
   250  001AE  E5 72              	mov	a,?a_dispWriteRu+2
   251  001B0  B4 A8 06           	cbne	a,#(168),l12
   252                           ;main.c: 101: j = 0xA6;
   253                           
   254                           	line	101
   255  001B3  75 70  00          	mov	?a_dispWriteRu+0,#high(166)
   256  001B6  75 71  A6          	mov	?a_dispWriteRu+0+1,#low(166)
   257  001B9                     l12:
   258                           ;main.c: 102: dispData = j;
   259                           
   260                           	line	102
   261  001B9  85 71  A0          	mov	0A0h,?a_dispWriteRu+0+1
   262                           ;main.c: 103: dispE = 1;
   263                           
   264                           	line	103
   265  001BC  D2 85              	setb	p0.5
   266                           ;main.c: 104: dispE = 0;
   267                           
   268                           	line	104
   269  001BE  C2 85              	clr	p0.5
   270                           ;main.c: 105: }
   271                           
   272                           	line	105
   273  001C0                     l9:
   274  001C0  22                 	ret
   275  001C1                     f1541:
   276  001C1  80 A4              	j	f1540
   277                           	FNSIZE	_dispWriteRu,3,0
   278                           	global	?a_dispWriteRu
   279  0000                     f1542	equ	0
   280                           ;	param _inp assigned to r4/r5 on entry
   281                           ;	param _space assigned to r2/r3 on entry
   282                           	line	106
   283  001C3                     _dispAnimate:
   284  001C3  02 0367            	j	f1551
   285  001C6                     f1550:
   286                           ;main.c: 106: void dispAnimate (unsigned char* i
                                 np, const int space) {
   287                           
   288                           ;	var   _length assigned to ?a_dispAnimate+0
   289                           ;main.c: 107: int length = strlen(inp);
   290                           
   291                           	global	_strlen
   292                           	signat	_strlen,4218
   293                           	FNCALL	_dispAnimate,_strlen
   294                           ;	var   _space assigned to ?a_dispAnimate+2
   295                           ;_space stored from WR1
   296                           	line	107
   297  001C6  8A 2F              	mov	?a_dispAnimate+2,r2
   298  001C8  8B 30              	mov	?a_dispAnimate+2+1,r3
   299                           ;	var   _inp assigned to ?a_dispAnimate+4
   300                           ;_inp stored from WR2
   301  001CA  8C 31              	mov	?a_dispAnimate+4,r4
   302  001CC  8D 32              	mov	?a_dispAnimate+4+1,r5
   303  001CE  AC 31              	mov	r4,?a_dispAnimate+4
   304  001D0  AD 32              	mov	r5,?a_dispAnimate+4+1
   305  001D2  12 0076            	lcall	_strlen
   306                           
   307  001D5  8A 2D              	mov	?a_dispAnimate+0,r2
   308  001D7  8B 2E              	mov	?a_dispAnimate+0+1,r3
   309                           ;	var   _curr assigned to ?a_dispAnimate+6
   310                           ;main.c: 108: int curr = 1;
   311                           
   312                           	line	108
   313  001D9  75 33  00          	mov	?a_dispAnimate+6,#high(1)
   314  001DC  75 34  01          	mov	?a_dispAnimate+6+1,#low(1)
   315                           ;	var   _buf assigned to ?a_dispAnimate+8
   316                           ;main.c: 109: int buf = 0;
   317                           
   318                           	line	109
   319  001DF  E4                 	clr	a
   320  001E0  F5 35              	mov	?a_dispAnimate+8,a
   321  001E2  F5 36              	mov	?a_dispAnimate+8+1,a
   322                           ;	var   _j assigned to ?a_dispAnimate+10
   323                           ;	var   _buf2 assigned to ?a_dispAnimate+11
   324                           ;	var   _in assigned to ?a_dispAnimate+12
   325                           ;main.c: 110: unsigned char j;
   326                           
   327                           ;main.c: 111: unsigned char buf2;
   328                           
   329                           ;main.c: 112: unsigned char in[55];
   330                           
   331                           ;main.c: 113: strcpy (in, inp);
   332                           
   333                           	global	_strcpy
   334                           	signat	_strcpy,8314
   335                           	FNCALL	_dispAnimate,_strcpy
   336                           	line	113
   337  001E4  AA 31              	mov	r2,?a_dispAnimate+4
   338  001E6  AB 32              	mov	r3,?a_dispAnimate+4+1
   339  001E8  7C 00              	mov	r4,#high (?a_dispAnimate+12)
   340  001EA  7D 39              	mov	r5,#low (?a_dispAnimate+12)
   341  001EC  12 00A2            	lcall	_strcpy
   342                           
   343                           ;main.c: 114: dispExecute (dispComm.Clear);
   344                           
   345                           	FNCALL	_dispAnimate,_dispExecute
   346                           	line	114
   347  001EF  AD 22              	mov	r5,_dispComm
   348  001F1  12 0156            	lcall	_dispExecute
   349                           
   350                           ;main.c: 115: space = length + 8;
   351                           
   352                           	line	115
   353  001F4  E5 2E              	mov	a,?a_dispAnimate+0+1
   354  001F6  24 08              	add	a,#08h
   355  001F8  F5 30              	mov	?a_dispAnimate+2+1,a
   356  001FA  E5 2D              	mov	a,?a_dispAnimate+0
   357  001FC  34 00              	addc	a,#0
   358  001FE  F5 2F              	mov	?a_dispAnimate+2,a
   359                           ;main.c: 116: while (1) {
   360                           
   361                           	line	116
   362  00200                     l15:
   363                           ;main.c: 117: buf = curr - length ;
   364                           
   365                           	line	117
   366  00200  E5 34              	mov	a,?a_dispAnimate+6+1
   367  00202  C3                 	clr	c
   368  00203  95 2E              	subb	a,?a_dispAnimate+0+1
   369  00205  F5 36              	mov	?a_dispAnimate+8+1,a
   370  00207  E5 33              	mov	a,?a_dispAnimate+6
   371  00209  95 2D              	subb	a,?a_dispAnimate+0
   372  0020B  F5 35              	mov	?a_dispAnimate+8,a
   373                           ;main.c: 118: if (buf >= 0) {
   374                           
   375                           	line	118
   376  0020D  E5 35              	mov	a,?a_dispAnimate+8
   377  0020F  20 E7 02           	bb	acc.7, u51
   378  00212  80 02              	jmp	u50
   379  00214                     u51:
   380  00214  80 76              	jmp	l17
   381  00216                     u50:
   382                           ;main.c: 119: if (buf > 0) {
   383                           
   384                           	line	119
   385  00216  E5 36              	mov	a,?a_dispAnimate+8+1
   386  00218  24 FF              	add	a,#low -(1)
   387  0021A  E5 35              	mov	a,?a_dispAnimate+8
   388  0021C  64 80              	xrl	a,#80h
   389  0021E  34 7F              	addc	a,#(high -(1))xor 80h
   390  00220  50 02              	bnc	u61
   391  00222  80 02              	jmp	u60
   392  00224                     u61:
   393  00224  80 14              	jmp	l18
   394  00226                     u60:
   395                           ;main.c: 120: dispSetPos(buf - 1);
   396                           
   397                           	global	_dispSetPos
   398                           	signat	_dispSetPos,4216
   399                           	FNCALL	_dispAnimate,_dispSetPos
   400                           	line	120
   401  00226  E5 36              	mov	a,?a_dispAnimate+8+1
   402  00228  24 FF              	add	a,#0FFh
   403  0022A  FD                 	mov	r5,a
   404  0022B  E5 35              	mov	a,?a_dispAnimate+8
   405  0022D  34 FF              	addc	a,#0FFh
   406  0022F  FC                 	mov	r4,a
   407  00230  12 036A            	lcall	_dispSetPos
   408                           
   409                           ;main.c: 121: dispWriteRu(' ');
   410                           
   411                           	FNCALL	_dispAnimate,_dispWriteRu
   412                           	line	121
   413  00233  7D 20              	mov	r5,#32
   414  00235  12 0165            	lcall	_dispWriteRu
   415                           
   416                           ;main.c: 122: }
   417                           
   418                           	line	122
   419  00238  80 07              	jmp	l19
   420                           	line	123
   421  0023A                     l18:
   422                           ;main.c: 123: else
   423                           
   424                           ;main.c: 124: dispSetPos(buf);
   425                           
   426                           	line	124
   427  0023A  AC 35              	mov	r4,?a_dispAnimate+8
   428  0023C  AD 36              	mov	r5,?a_dispAnimate+8+1
   429  0023E  12 036A            	lcall	_dispSetPos
   430                           
   431  00241                     l19:
   432                           ;main.c: 125: for (i = 0; i < length; i++)
   433                           
   434                           	global	_i
   435                           	line	125
   436  00241  E4                 	clr	a
   437  00242  F5 20              	mov	_i,a
   438  00244  F5 21              	mov	_i+1,a
   439  00246  80 2A              	jmp	l23
   440                           	line	126
   441  00248                     l20:
   442                           ;main.c: 126: if (buf + i < 8)
   443                           
   444  00248  E5 36              	mov	a,?a_dispAnimate+8+1
   445  0024A  25 21              	add	a,_i+1
   446  0024C  FD                 	mov	r5,a
   447  0024D  E5 35              	mov	a,?a_dispAnimate+8
   448  0024F  35 20              	addc	a,_i
   449  00251  FC                 	mov	r4,a
   450  00252  ED                 	mov	a,r5
   451  00253  24 F8              	add	a,#low -(8)
   452  00255  EC                 	mov	a,r4
   453  00256  64 80              	xrl	a,#80h
   454  00258  34 7F              	addc	a,#(high -(8))xor 80h
   455  0025A  40 02              	bc	u71
   456  0025C  80 02              	jmp	u70
   457  0025E                     u71:
   458  0025E  80 0A              	jmp	l24
   459  00260                     u70:
   460                           ;main.c: 127: dispWriteRu(in[i]);
   461                           
   462                           	line	127
   463  00260  74 39              	mov	a,#?a_dispAnimate+12
   464  00262  25 21              	add	a,_i+1
   465  00264  F9                 	mov	r1,a
   466  00265  87 05              	mov	5+0,@r1
   467  00267  12 0165            	lcall	_dispWriteRu
   468                           
   469  0026A                     l24:
   470                           	line	125
   471  0026A  05 21              	inc	_i+1
   472  0026C  E5 21              	mov	a,_i+1
   473  0026E  70 02              	jnz	u80
   474  00270  05 20              	inc	_i
   475  00272                     u80:
   476  00272                     l23:
   477  00272  C3                 	clr	c
   478  00273  E5 21              	mov	a,_i+1
   479  00275  95 2E              	subb	a,?a_dispAnimate+0+1
   480  00277  85 2D  F0          	mov	b,?a_dispAnimate+0
   481  0027A  63 F0 80           	xrl	b,#80h
   482  0027D  E5 20              	mov	a,_i
   483  0027F  64 80              	xrl	a,#80h
   484  00281  95 F0              	subb	a,b
   485  00283  40 02              	bc	u91
   486  00285  80 02              	jmp	u90
   487  00287                     u91:
   488  00287  80 BF              	jmp	l20
   489  00289                     u90:
   490  00289                     l21:
   491                           ;main.c: 128: }
   492                           
   493                           	line	128
   494  00289  02 0315            	jmp	l25
   495                           	line	129
   496  0028C                     l17:
   497                           ;main.c: 129: else {
   498                           
   499                           ;main.c: 130: dispSetPos(0);
   500                           
   501                           	line	130
   502  0028C  7C 00              	mov	r4,#high (0)
   503  0028E  7D 00              	mov	r5,#low (0)
   504  00290  12 036A            	lcall	_dispSetPos
   505                           
   506                           ;main.c: 131: if (8 - curr >= 0)
   507                           
   508                           	line	131
   509  00293  74 08              	mov	a,#08h
   510  00295  C3                 	clr	c
   511  00296  95 34              	subb	a,?a_dispAnimate+6+1
   512  00298  FD                 	mov	r5,a
   513  00299  74 00              	mov	a,#0
   514  0029B  95 33              	subb	a,?a_dispAnimate+6
   515  0029D  FC                 	mov	r4,a
   516  0029E  EC                 	mov	a,r4
   517  0029F  20 E7 02           	bb	acc.7, u101
   518  002A2  80 02              	jmp	u100
   519  002A4                     u101:
   520  002A4  80 3C              	jmp	l26
   521  002A6                     u100:
   522                           ;main.c: 132: for (i = 0; i < curr; i++)
   523                           
   524                           	line	132
   525  002A6  E4                 	clr	a
   526  002A7  F5 20              	mov	_i,a
   527  002A9  F5 21              	mov	_i+1,a
   528  002AB  80 1C              	jmp	l30
   529                           	line	133
   530  002AD                     l27:
   531                           ;main.c: 133: dispWriteRu(in[-buf + i]);
   532                           
   533  002AD  E5 21              	mov	a,_i+1
   534  002AF  C3                 	clr	c
   535  002B0  95 36              	subb	a,?a_dispAnimate+8+1
   536  002B2  FD                 	mov	r5,a
   537  002B3  E5 20              	mov	a,_i
   538  002B5  95 35              	subb	a,?a_dispAnimate+8
   539  002B7  FC                 	mov	r4,a
   540  002B8  74 39              	mov	a,#?a_dispAnimate+12
   541  002BA  2D                 	add	a,r5
   542  002BB  F9                 	mov	r1,a
   543  002BC  87 05              	mov	5+0,@r1
   544  002BE  12 0165            	lcall	_dispWriteRu
   545                           
   546                           	line	132
   547  002C1  05 21              	inc	_i+1
   548  002C3  E5 21              	mov	a,_i+1
   549  002C5  70 02              	jnz	u110
   550  002C7  05 20              	inc	_i
   551  002C9                     u110:
   552  002C9                     l30:
   553  002C9  C3                 	clr	c
   554  002CA  E5 21              	mov	a,_i+1
   555  002CC  95 34              	subb	a,?a_dispAnimate+6+1
   556  002CE  85 33  F0          	mov	b,?a_dispAnimate+6
   557  002D1  63 F0 80           	xrl	b,#80h
   558  002D4  E5 20              	mov	a,_i
   559  002D6  64 80              	xrl	a,#80h
   560  002D8  95 F0              	subb	a,b
   561  002DA  40 02              	bc	u121
   562  002DC  80 02              	jmp	u120
   563  002DE                     u121:
   564  002DE  80 CD              	jmp	l27
   565  002E0                     u120:
   566  002E0                     l28:
   567                           	line	133
   568  002E0  80 33              	jmp	l31
   569                           	line	134
   570  002E2                     l26:
   571                           ;main.c: 134: else
   572                           
   573                           ;main.c: 135: for (i = 0; i < 8; i++)
   574                           
   575                           	line	135
   576  002E2  E4                 	clr	a
   577  002E3  F5 20              	mov	_i,a
   578  002E5  F5 21              	mov	_i+1,a
   579  002E7  80 1C              	jmp	l35
   580                           	line	136
   581  002E9                     l32:
   582                           ;main.c: 136: dispWriteRu(in[-buf + i]);
   583                           
   584  002E9  E5 21              	mov	a,_i+1
   585  002EB  C3                 	clr	c
   586  002EC  95 36              	subb	a,?a_dispAnimate+8+1
   587  002EE  FD                 	mov	r5,a
   588  002EF  E5 20              	mov	a,_i
   589  002F1  95 35              	subb	a,?a_dispAnimate+8
   590  002F3  FC                 	mov	r4,a
   591  002F4  74 39              	mov	a,#?a_dispAnimate+12
   592  002F6  2D                 	add	a,r5
   593  002F7  F9                 	mov	r1,a
   594  002F8  87 05              	mov	5+0,@r1
   595  002FA  12 0165            	lcall	_dispWriteRu
   596                           
   597                           	line	135
   598  002FD  05 21              	inc	_i+1
   599  002FF  E5 21              	mov	a,_i+1
   600  00301  70 02              	jnz	u130
   601  00303  05 20              	inc	_i
   602  00305                     u130:
   603  00305                     l35:
   604  00305  E5 21              	mov	a,_i+1
   605  00307  24 F8              	add	a,#low -(8)
   606  00309  E5 20              	mov	a,_i
   607  0030B  64 80              	xrl	a,#80h
   608  0030D  34 7F              	addc	a,#(high -(8))xor 80h
   609+ 0030F  50 02              	bnc	u141
   610  00311  80 02              	jmp	u140
   611  00313                     u141:
   612  00313  80 D4              	jmp	l32
   613  00315                     u140:
   614  00315                     l33:
   615                           	line	136
   616  00315                     l31:
   617                           	line	137
   618  00315                     l25:
   619                           ;main.c: 137: }
   620                           
   621                           ;main.c: 139: for (i = 0; i < 300; i++);
   622                           
   623                           	line	139
   624  00315  E4                 	clr	a
   625  00316  F5 20              	mov	_i,a
   626  00318  F5 21              	mov	_i+1,a
   627  0031A  80 08              	jmp	l39
   628  0031C                     l36:
   629  0031C  05 21              	inc	_i+1
   630  0031E  E5 21              	mov	a,_i+1
   631  00320  70 02              	jnz	u150
   632  00322  05 20              	inc	_i
   633  00324                     u150:
   634  00324                     l39:
   635  00324  E5 21              	mov	a,_i+1
   636  00326  24 D4              	add	a,#low -(300)
   637  00328  E5 20              	mov	a,_i
   638  0032A  64 80              	xrl	a,#80h
   639  0032C  34 7E              	addc	a,#(high -(300))xor 80h
   640  0032E  50 02              	bnc	u161
   641  00330  80 02              	jmp	u160
   642  00332                     u161:
   643  00332  80 E8              	jmp	l36
   644  00334                     u160:
   645  00334                     l37:
   646                           ;main.c: 140: if (curr >= 8 + length)
   647                           
   648                           	line	140
   649  00334  E5 2E              	mov	a,?a_dispAnimate+0+1
   650  00336  24 08              	add	a,#08h
   651  00338  FD                 	mov	r5,a
   652  00339  E5 2D              	mov	a,?a_dispAnimate+0
   653  0033B  34 00              	addc	a,#0
   654  0033D  FC                 	mov	r4,a
   655  0033E  C3                 	clr	c
   656  0033F  E5 34              	mov	a,?a_dispAnimate+6+1
   657  00341  9D                 	subb	a,r5
   658  00342  8C F0              	mov	b,r4
   659  00344  63 F0 80           	xrl	b,#80h
   660  00347  E5 33              	mov	a,?a_dispAnimate+6
   661  00349  64 80              	xrl	a,#80h
   662  0034B  95 F0              	subb	a,b
   663  0034D  40 02              	bc	u171
   664  0034F  80 02              	jmp	u170
   665  00351                     u171:
   666  00351  80 08              	jmp	l40
   667  00353                     u170:
   668                           ;main.c: 141: curr = 1;
   669                           
   670                           	line	141
   671  00353  75 33  00          	mov	?a_dispAnimate+6,#high(1)
   672  00356  75 34  01          	mov	?a_dispAnimate+6+1,#low(1)
   673  00359  80 08              	jmp	l41
   674                           	line	142
   675  0035B                     l40:
   676                           ;main.c: 142: else
   677                           
   678                           ;main.c: 143: curr++;
   679                           
   680                           	line	143
   681  0035B  05 34              	inc	?a_dispAnimate+6+1
   682  0035D  E5 34              	mov	a,?a_dispAnimate+6+1
   683  0035F  70 02              	jnz	u180
   684  00361  05 33              	inc	?a_dispAnimate+6
   685  00363                     u180:
   686  00363                     l41:
   687                           	line	144
   688  00363                     l14:
   689                           	line	116
   690  00363  02 0200            	jmp	l15
   691  00366                     l16:
   692                           ;main.c: 144: }
   693                           
   694                           ;main.c: 145: }
   695                           
   696                           	line	145
   697  00366                     l13:
   698  00366  22                 	ret
   699  00367                     f1551:
   700  00367  02 01C6            	j	f1550
   701                           	FNSIZE	_dispAnimate,67,0
   702                           	global	?a_dispAnimate
   703  0000                     f1552	equ	0
   704                           ;	param _pos assigned to r4/r5 on entry
   705                           	line	147
   706  0036A                     _dispSetPos:
   707  0036A  80 0D              	j	f1591
   708  0036C                     f1590:
   709                           ;main.c: 147: void dispSetPos (int pos) {
   710                           
   711                           ;main.c: 148: dispExecute(0x80 + pos);
   712                           
   713                           	FNCALL	_dispSetPos,_dispExecute
   714                           ;	var   _pos assigned to ?a_dispSetPos+0
   715                           ;_pos stored from WR2
   716  0036C  8C 70              	mov	?a_dispSetPos+0,r4
   717  0036E  8D 71              	mov	?a_dispSetPos+0+1,r5
   718                           	line	148
   719  00370  E5 71              	mov	a,?a_dispSetPos+0+1
   720  00372  24 80              	add	a,#-128
   721  00374  FD                 	mov	r5,a
   722  00375  12 0156            	lcall	_dispExecute
   723                           
   724                           ;main.c: 149: }
   725                           
   726                           	line	149
   727  00378                     l42:
   728  00378  22                 	ret
   729  00379                     f1591:
   730  00379  80 F1              	j	f1590
   731                           	FNSIZE	_dispSetPos,2,0
   732                           	global	?a_dispSetPos
   733  0000                     f1592	equ	0
   734                           	psect	strings,class=CODE
   735                           	psect	strings
   736  00100                     u19:
   737  00100  C8 C3 CD C0 D2 CE  	db	-56,-61,-51,-64,-46,-50,-62,-56,-41,32,-62,-
              C2 C8 D7 20 C2 C0  64,-60,-56,-52,0
              C4 C8 CC 00        
   738  0000                     _A10	equ	162
   739  0000                     _A11	equ	163
   740  0000                     _A12	equ	164
   741  0000                     _A13	equ	165
   742  0000                     _A14	equ	166
   743  0000                     _A15	equ	167
   744  0000                     _A8	equ	160
   745  0000                     _A9	equ	161
   746  0000                     _AC	equ	214
   747  0000                     _ACC0	equ	224
   748  0000                     _ACC1	equ	225
   749  0000                     _ACC2	equ	226
   750  0000                     _ACC3	equ	227
   751  0000                     _ACC4	equ	228
   752  0000                     _ACC5	equ	229
   753  0000                     _ACC6	equ	230
   754  0000                     _ACC7	equ	231
   755  0000                     _AD0	equ	128
   756  0000                     _AD1	equ	129
   757  0000                     _AD2	equ	130
   758  0000                     _AD3	equ	131
   759  0000                     _AD4	equ	132
   760  0000                     _AD5	equ	133
   761  0000                     _AD6	equ	134
   762  0000                     _AD7	equ	135
   763  0000                     _B0	equ	240
   764  0000                     _B1	equ	241
   765  0000                     _B2	equ	242
   766  0000                     _B3	equ	243
   767  0000                     _B4	equ	244
   768  0000                     _B5	equ	245
   769  0000                     _B6	equ	246
   770  0000                     _B7	equ	247
   771  0000                     _CY	equ	215
   772  0000                     _EA	equ	175
   773  0000                     _ES	equ	172
   774  0000                     _ET0	equ	169
   775  0000                     _ET1	equ	171
   776  0000                     _EX0	equ	168
   777  0000                     _EX1	equ	170
   778  0000                     _F0	equ	213
   779  0000                     _IE0	equ	137
   780  0000                     _IE1	equ	139
   781  0000                     _INT0	equ	178
   782  0000                     _INT1	equ	179
   783  0000                     _IT0	equ	136
   784  0000                     _IT1	equ	138
   785  0000                     _OV	equ	210
   786  0000                     _P	equ	208
   787  0000                     _P00	equ	128
   788  0000                     _P01	equ	129
   789  0000                     _P02	equ	130
   790  0000                     _P03	equ	131
   791  0000                     _P04	equ	132
   792  0000                     _P05	equ	133
   793  0000                     _P06	equ	134
   794  0000                     _P07	equ	135
   795  0000                     _P10	equ	144
   796  0000                     _P11	equ	145
   797  0000                     _P12	equ	146
   798  0000                     _P13	equ	147
   799  0000                     _P14	equ	148
   800  0000                     _P15	equ	149
   801  0000                     _P16	equ	150
   802  0000                     _P17	equ	151
   803  0000                     _P20	equ	160
   804  0000                     _P21	equ	161
   805  0000                     _P22	equ	162
   806  0000                     _P23	equ	163
   807  0000                     _P24	equ	164
   808  0000                     _P25	equ	165
   809  0000                     _P26	equ	166
   810  0000                     _P27	equ	167
   811  0000                     _P30	equ	176
   812  0000                     _P31	equ	177
   813  0000                     _P32	equ	178
   814  0000                     _P33	equ	179
   815  0000                     _P34	equ	180
   816  0000                     _P35	equ	181
   817  0000                     _P36	equ	182
   818  0000                     _P37	equ	183
   819  0000                     _PS	equ	188
   820  0000                     _PT0	equ	185
   821  0000                     _PT1	equ	187
   822  0000                     _PX0	equ	184
   823  0000                     _PX1	equ	186
   824  0000                     _RB8	equ	154
   825  0000                     _RD	equ	183
   826  0000                     _REN	equ	156
   827  0000                     _RI	equ	152
   828  0000                     _RS0	equ	211
   829  0000                     _RS1	equ	212
   830  0000                     _RXD	equ	176
   831  0000                     _SM0	equ	159
   832  0000                     _SM1	equ	158
   833  0000                     _SM2	equ	157
   834  0000                     _T0	equ	180
   835  0000                     _T1	equ	181
   836  0000                     _TB8	equ	155
   837  0000                     _TF0	equ	141
   838  0000                     _TF1	equ	143
   839  0000                     _TI	equ	153
   840  0000                     _TR0	equ	140
   841  0000                     _TR1	equ	142
   842  0000                     _TXD	equ	177
   843  0000                     _WR	equ	182
   844  0000                     _dispE	equ	133
   845  0000                     _dispRS	equ	134
   846  0000                     _dispRW	equ	135
   847  0000                     _interr	equ	128
   848  0000                     _ACC	equ	224
   849  0000                     _B	equ	240
   850  0000                     _DPH	equ	131
   851  0000                     _DPL	equ	130
   852  0000                     _IE	equ	168
   853  0000                     _IP	equ	184
   854  0000                     _P0	equ	128
   855  0000                     _P1	equ	144
   856  0000                     _P2	equ	160
   857  0000                     _P3	equ	176
   858  0000                     _PCON	equ	135
   859  0000                     _PSW	equ	208
   860  0000                     _SBUF	equ	153
   861  0000                     _SCON	equ	152
   862  0000                     _SP	equ	129
   863  0000                     _TCON	equ	136
   864  0000                     _TH0	equ	140
   865  0000                     _TH1	equ	141
   866  0000                     _TL0	equ	138
   867  0000                     _TL1	equ	139
   868  0000                     _TMOD	equ	137
   869  0000                     _dispData	equ	160
   870  0000                     _ACC_BITS	equ	224
   871  0000                     _B_BITS	equ	240
   872  0000                     _IE_BITS	equ	168
   873  0000                     _IP_BITS	equ	184
   874  0000                     _P0_BITS	equ	128
   875  0000                     _P1_BITS	equ	144
   876  0000                     _P2_BITS	equ	160
   877  0000                     _P3_BITS	equ	176
   878  0000                     _PCON_BITS	equ	135
   879  0000                     _PSW_BITS	equ	208
   880  0000                     _SCON_BITS	equ	152
   881  0000                     _TCON_BITS	equ	136
   882  0000                     _TMOD_BITS	equ	137
   883                           	psect	rbss,class=DATA,space=1
   884                           	psect	rbss
   885                           	global	_i
   886  00020                     _i:
   887  00020                     	ds	2
   888                           	global	_dispComm
   889  00022                     _dispComm:
   890  00022                     	ds	11


HI-TECH Software 8051 Macro Assembler V9.60                                Page 2
Symbol Table                                           Tue Mar 18 21:55:43 2025

            _B 000F0              l3 00122              l4 00120  
            l5 00120              _P 000D0              l6 00122  
            l7 00153              l8 00162              l9 001C0  
            _i 00020       _dispData 000A0             _B0 000F0  
           _B1 000F1             _B2 000F2             _B3 000F3  
           _B4 000F4             _B5 000F5             _B6 000F6  
           _A8 000A0             _B7 000F7             _A9 000A1  
           _F0 000D5             _AC 000D6             l10 001AE  
           l11 001AE             l20 00248             l12 001B9  
           l13 00366             l21 00289             l14 00363  
           l30 002C9             _EA 000AF             l31 00315  
           l23 00272             l15 00200             l16 00366  
           l40 0035B             l32 002E9             l24 0026A  
     _dispComm 00022             l41 00363             l33 00315  
           l25 00315             l17 0028C             l42 00378  
           l26 002E2             l18 0023A             l35 00305  
           l27 002AD             l19 00241             _P0 00080  
           l36 0031C             l28 002E0             _P1 00090  
           l37 00334             _P2 000A0             _P3 000B0  
           l39 00324             _IE 000A8             _T0 000B4  
           _T1 000B5             _ES 000AC             _CY 000D7  
           _IP 000B8             _RD 000B7             u10 0017A  
           u11 00184             u20 00182             _RI 00098  
           u21 00184             u30 00188             u31 00186  
           u40 001A0             _TI 00099             u41 0019E  
           u50 00216             _PS 000BC             u51 00214  
           u19 00100             _OV 000D2             u60 00226  
           u61 00224             _SP 00081             u70 00260  
           u71 0025E       _dispInit 00125             u80 00272  
           u90 00289             u91 00287             _WR 000B6  
       _B_BITS 000F0            _A10 000A2            _A11 000A3  
          _A12 000A4            _A13 000A5            _A14 000A6  
          _A15 000A7            _AD0 00080            _AD1 00081  
          _AD2 00082            _AD3 00083            _AD4 00084  
          _AD5 00085            _AD6 00086            _AD7 00087  
          _ACC 000E0            _P00 00080            _P01 00081  
          _P10 00090            _P02 00082            _P11 00091  
          _P03 00083            _P20 000A0            _P12 00092  
          _P04 00084            _P21 000A1            _P13 00093  
          _P05 00085            _P30 000B0            _P22 000A2  
          _P14 00094            _P06 00086            _P31 000B1  
          _P23 000A3            _P15 00095            _P07 00087  
          _P32 000B2            _P24 000A4            _P16 00096  
          _P33 000B3            _P25 000A5            _P17 00097  
          _P34 000B4            _P26 000A6            _P35 000B5  
          _P27 000A7            _P36 000B6            _P37 000B7  
          _IE0 00089            _IE1 0008B            _ET0 000A9  
          _ET1 000AB            _EX0 000A8            _EX1 000AA  
          _DPH 00083            _DPL 00082            _IT0 00088  
          _IT1 0008A            _RB8 0009A            u100 002A6  
          u101 002A4            u110 002C9            u120 002E0  
          u121 002DE            u130 00305            _TF0 0008D  
          _TB8 0009B            u140 00315            _TF1 0008F  
          u141 00313            u150 00324            _TH0 0008C  
          u160 00334            _TH1 0008D            u161 00332  
          u170 00353            u171 00351            u180 00363  
          _SM0 0009F            _SM1 0009E            _TL0 0008A  
          _SM2 0009D            _PT0 000B9            _TL1 0008B  
          _PT1 000BB            _RS0 000D3            _RS1 000D4  
          _REN 0009C            _PX0 000B8            _PX1 000BA  
          _TR0 0008C            _TR1 0008E            _RXD 000B0  
          _PSW 000D0            _TXD 000B1        _P0_BITS 00080  
      _P1_BITS 00090        _P2_BITS 000A0        _P3_BITS 000B0  
      _IE_BITS 000A8       _ACC_BITS 000E0        _IP_BITS 000B8  
         f1510 00127           f1511 00154           f1512 00000  
         f1530 00158           f1531 00163           f1540 00167  
         f1532 00000           f1541 001C1           f1550 001C6  
         f1542 00000           f1551 00367           f1552 00000  
         f1480 00112           f1481 00123           f1482 00000  
         f1590 0036C           f1591 00379           f1592 00000  
         _ACC0 000E0           _ACC1 000E1           _ACC2 000E2  
         _ACC3 000E3           _ACC4 000E4           _ACC5 000E5  
         _ACC6 000E6           _ACC7 000E7  stack_internal 00001  
       _dispRS 00086         _dispRW 00087           _INT0 000B2  
         _INT1 000B3           _PCON 00087           _SCON 00098  
         _SBUF 00099           _TCON 00088           _TMOD 00089  
       _interr 00080     _dispSetPos 0036A           _main 00110  
       _strcpy 000A2         _strlen 00076    _dispAnimate 001C3  
     _PSW_BITS 000D0    _dispExecute 00156          _dispE 00085  
  _dispWriteRu 00165      _PCON_BITS 00087  ?a_dispAnimate 0002D  
    _SCON_BITS 00098      _TCON_BITS 00088   ?a_dispSetPos 00070  
?a_dispWriteRu 00070      _TMOD_BITS 00089  
